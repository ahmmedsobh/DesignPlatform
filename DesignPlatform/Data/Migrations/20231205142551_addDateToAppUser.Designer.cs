// <auto-generated />
using System;
using DesignPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesignPlatform.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231205142551_addDateToAppUser")]
    partial class addDateToAppUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DesignPlatform.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MainRoles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DesignPlatform.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DesignPlatform.Models.DesignDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("DesignDocs");
                });

            modelBuilder.Entity("DesignPlatform.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DesignPlatform.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Displayed")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DesignPlatform.Models.PackageFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageFeatures");
                });

            modelBuilder.Entity("DesignPlatform.Models.PackageSubPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("SubPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("SubPackageId");

                    b.ToTable("PackageSubPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.Packagee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BackYardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FrontBackYardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FrontYardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Packagees");
                });

            modelBuilder.Entity("DesignPlatform.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesignerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignerSkillsSet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYoWantToHaveAFirePitAreaAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYoWantToHaveAFirePitAreaNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouHaveKidsAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouHaveKidsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouHaveOrWantAPergolaOrCoveredPatioAreaAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouHaveOrWantAPergolaOrCoveredPatioAreaNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouLikeColorfulOrSimpleGreenAndWhitePlantsAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouLikeColorfulOrSimpleGreenAndWhitePlantsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantABBQAreaAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantABBQAreaNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAGrassAreaAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAGrassAreaNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAWaterFeatureAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAWaterFeatureNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAnyPrivacyAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAnyPrivacyNotes1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoYouWantAnyPrivacyNotes2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoyouEntertainALotAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoyouEntertainALotNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouHaveASideYardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouHaveASideYardNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouLikeColorfulOrSimpleGreenAndWhitePlantsAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouLikeColorfulOrSimpleGreenAndWhitePlantsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAGrassAreaAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAGrassAreaNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAWaterFeatureAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAWaterFeatureNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAnyPrivacyAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAnyPrivacyNotes1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAnyPrivacyNotes2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAnyTallTreesInYourFrontYardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantAnyTallTreesInYourFrontYardNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantToDoAnythingDifferentWithYourEntranceAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYDoYouWantToDoAnythingDifferentWithYourEntranceNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYRegardingTheAmountOfPlantsAreYouLookingForSomethingMoreAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYRegardingTheAmountOfPlantsAreYouLookingForSomethingMoreNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWhatAreYouLookingToKeepOrRemoveInYourYardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWhatAreYouLookingToKeepOrRemoveInYourYardNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWhatIsYourBudgetForYourYardRenovationAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWhatIsYourBudgetForYourYardRenovationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWhenDoYouPlanOnStartingYourYardRenovationAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWhenDoYouPlanOnStartingYourYardRenovationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWouldYouLikeToAddAnyTypeOfHardscapeAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FYWouldYouLikeToAddAnyTypeOfHardscapeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClientUploadResources")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsThePropertyVisibleOnGoogleMapsAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsThePropertyVisibleOnGoogleMapsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProjectManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegardingTheAmountOfPlantsAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegardingTheAmountOfPlantsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScopeAndSizeOfProject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SummaryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatSortOfStyleAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatSortOfStyleNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatYourAreLookingToKeepAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatYourAreLookingToKeepNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WouldYouLikeToAddHardscapeAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WouldYouLikeToAddHardscapeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouWantADesignForWahtAreaAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouWantADesignForWahtAreaNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DesignPlatform.Models.ProjectPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.ProjectSubPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectSubPackageId")
                        .HasColumnType("int");

                    b.Property<int>("SubPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectSubPackageId");

                    b.HasIndex("SubPackageId");

                    b.ToTable("ProjectSubPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DesignPlatform.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DesignPlatform.Models.SubPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.SubPackageFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubPackageId");

                    b.ToTable("SubPackageFeatures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DesignPlatform.Models.ApplicationUser", b =>
                {
                    b.HasOne("DesignPlatform.Models.Country", "Country")
                        .WithMany("Clients")
                        .HasForeignKey("CountryId");

                    b.HasOne("DesignPlatform.Models.State", "State")
                        .WithMany("Clients")
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DesignPlatform.Models.DesignDoc", b =>
                {
                    b.HasOne("DesignPlatform.Models.Project", "Project")
                        .WithMany("DesignDocs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DesignPlatform.Models.Image", b =>
                {
                    b.HasOne("DesignPlatform.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DesignPlatform.Models.Message", b =>
                {
                    b.HasOne("DesignPlatform.Models.ApplicationUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("DesignPlatform.Models.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DesignPlatform.Models.PackageFeature", b =>
                {
                    b.HasOne("DesignPlatform.Models.Packagee", "Package")
                        .WithMany("PackageFeatures")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DesignPlatform.Models.PackageSubPackage", b =>
                {
                    b.HasOne("DesignPlatform.Models.Packagee", "Package")
                        .WithMany("PackageSubPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignPlatform.Models.SubPackage", "SubPackage")
                        .WithMany("PackageSubPackages")
                        .HasForeignKey("SubPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("SubPackage");
                });

            modelBuilder.Entity("DesignPlatform.Models.Project", b =>
                {
                    b.HasOne("DesignPlatform.Models.ApplicationUser", "Client")
                        .WithMany("ClientProjects")
                        .HasForeignKey("ClientId");

                    b.HasOne("DesignPlatform.Models.ApplicationUser", "Desinger")
                        .WithMany("DesignerProjects")
                        .HasForeignKey("DesignerId");

                    b.HasOne("DesignPlatform.Models.ApplicationUser", "ProjectManager")
                        .WithMany("ProjectManagerProjects")
                        .HasForeignKey("ProjectManagerId");

                    b.Navigation("Client");

                    b.Navigation("Desinger");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("DesignPlatform.Models.ProjectPackage", b =>
                {
                    b.HasOne("DesignPlatform.Models.Packagee", "Package")
                        .WithMany("ProjectPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignPlatform.Models.Project", "Project")
                        .WithMany("ProjectPackages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DesignPlatform.Models.ProjectSubPackage", b =>
                {
                    b.HasOne("DesignPlatform.Models.Project", "Project")
                        .WithMany("ProjectSubPackages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignPlatform.Models.ProjectSubPackage", null)
                        .WithMany("ProjectSubPackages")
                        .HasForeignKey("ProjectSubPackageId");

                    b.HasOne("DesignPlatform.Models.SubPackage", "SubPackage")
                        .WithMany()
                        .HasForeignKey("SubPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SubPackage");
                });

            modelBuilder.Entity("DesignPlatform.Models.State", b =>
                {
                    b.HasOne("DesignPlatform.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DesignPlatform.Models.SubPackageFeature", b =>
                {
                    b.HasOne("DesignPlatform.Models.SubPackage", "SubPackage")
                        .WithMany("SubPackageFeatures")
                        .HasForeignKey("SubPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubPackage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DesignPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DesignPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesignPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DesignPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DesignPlatform.Models.ApplicationUser", b =>
                {
                    b.Navigation("ClientProjects");

                    b.Navigation("DesignerProjects");

                    b.Navigation("ProjectManagerProjects");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("DesignPlatform.Models.Country", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("States");
                });

            modelBuilder.Entity("DesignPlatform.Models.Packagee", b =>
                {
                    b.Navigation("PackageFeatures");

                    b.Navigation("PackageSubPackages");

                    b.Navigation("ProjectPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.Project", b =>
                {
                    b.Navigation("DesignDocs");

                    b.Navigation("Images");

                    b.Navigation("ProjectPackages");

                    b.Navigation("ProjectSubPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.ProjectSubPackage", b =>
                {
                    b.Navigation("ProjectSubPackages");
                });

            modelBuilder.Entity("DesignPlatform.Models.State", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("DesignPlatform.Models.SubPackage", b =>
                {
                    b.Navigation("PackageSubPackages");

                    b.Navigation("SubPackageFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
